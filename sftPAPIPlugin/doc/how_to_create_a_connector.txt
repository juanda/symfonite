How to create a connector 
=========================

The connector is a service used by the PAPI framework in order to retrieve the
user's attributes from the information system where his data are stored (a
database, a LDAP directory service, a file, etc). The connector must be imple-
mented as a class with several required public method. This document describes
how you can develop a connector to access your information service.

Create a class named {connector_name}Connector. For example, if we're going
to create a connector named "array" (because the users data are stored in a PHP
array), we must create a class named 'arrayConnector'.

This class can live in whatever "lib" directory of the project you want, but it
is highly recommended to put it in a directory named "array" under the
plugins/sftPAPIPlugin/lib/connectors directory:

#plugins/sftPAPIPlugin//lib/connectors/array/arrayConnector.class.php
<?php

class arrayConnector
{}
?>

Now you have to add three publics methods to the class:

public function __construct($data)
{}

public function isAuthenticated()
{}

public function getAttributes()
{}

The '__construct($data)' method is going to initialize the object with the data
collected by the login form. If you are going to use the default form, then the
$data argument is an associative two element array wich keys are 'username' and
'password', and which values are what you can imagine. If needed, the login form
and the data collected by him can be redefined. How to do this is explained
in the document 'doc/how_to_redefine_the_login_form.txt'.

The 'isAuthenticated()' method must return true if the data retrieved from the
login form corresponds to a authenticated user in the information systemm and
false otherwise.

The 'getAttributes()' method must returned a normalized array of attributes
associated to the user. Such array must be an associative array
which keys are the names of the attributes and wich values can be scalars with
the attributes values or arrays of values when the attribute is multi-valued.
For example:

$attributes = array(
'attr1' => val1,
'attr2' => array(val21,val22,val23),
);

if the connector needs some configuration parameters, you should define them
in the 'sft_papi_plugin_connectors' section of the app.yml. For example:

[yaml]
#config/app.yml
all:
  sft_papi_plugin_as:
    ...
  sft_papi_plugin_connectors:
    array:
      parameter1: test parameter1
      parameter2: test parameter2

The way to get such parameter in the connector code is by means of the
sfConfig::get() symfony function, for example:

$config_parameter = sfConfig::get('app_sft_papi_plugin_connectors_array');

gives the following array:

$config_parameter:

Array
(
    [parameter1] => test parameter1
    [parameter2] => test parameter2
)

And that's all folks!. Now you can use the your "baked" connector by setting the
'sft_papi_plugin_as_connector' with the name of your connector. In the case
of the example:

[yaml]
#config/app.yml
all:
    sft_papi_plugin_as:
      connector: array
      ...
