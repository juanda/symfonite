<?php

/**
 * Skeleton subclass for representing a row from the 'sft_usuarios' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Oct 23 16:15:26 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.sftGuardPlugin.lib.model
 */
class SftUsuario extends BaseSftUsuario
{

    /**
     * Initializes internal state of SftUsuario object.
     * @see        parent::__construct()
     */
    public function __construct()
    {
        // Make sure that parent constructor is always invoked, since that
        // is where any default values for this object are set.
        parent::__construct();
    }

    public function getIdUsuario()
    {
        return $this->getId();
    }

    public function __toString()
    {
        if (is_null($this->getIdPersona()))
        {
            $organismo = $this->getSftOrganismo();

            return $organismo->getNombre();
        } else
        {
            $persona = $this->getSftPersona();

            return $persona->getNombre() . ' ' . $persona->getApellido1() . ' ' . $persona->getApellido2();
        }
    }

    public function delete(PropelPDO $con = null)
    {
        // Borramos el sfuser asociado y todo su profile
        $sfUser = $this->getSfGuardUser();
        if ($sfUser instanceof sfGuardUser)
        {
            $sfUser->delete();
        }

        //Borramos emais

        $emails = $this->getSftEmails();

        foreach ($emails as $email)
        {
            $email->delete($con);
        }

        // Borramos direcciones

        $direcciones = $this->getSftDireccions();

        foreach ($direcciones as $direccion)
        {
            $direccion->delete($con);
        }

        // Borramos telefonos

        $telefonos = $this->getSftTelefonos();

        foreach ($telefonos as $telefono)
        {
            $telefono->delete($con);
        }

        // Borramos los atributos
        $atributos = $this->getSftUsuAtributoValors();

        foreach ($atributos as $atributo)
        {
            $atributo->delete($con);
        }

        // Borramos las configuraciones personales
        $confPersonales = $this->getSftConfPersonals();
        foreach ($confPersonales as $confPersonal)
        {
            $confPersonal->delete($con);
        }

        // borramos los controles de acceso
        $control_acceso = $this->getSftControlAcceso();

        if ($control_acceso instanceof SftControlAcceso)
        {
            $control_acceso->delete();
        }

        // Borramos los accesos
        $accesos = $this->getSftAccesos();

        foreach ($accesos as $acceso)
        {
            $acceso->delete($con);
        }

        parent::delete($con);
    }

    /**
     * Función que devuelve el nombre completo del usuario actual
     *
     * @return String
     */
    public function NombreCompleto()
    {
        $sNombreCompleto = "";
        if ($this->getIdUsuario() > 0)
        {
            if ($this->esPersona())
            {
                $oPersona = SftPersonaPeer::retrieveByPK($this->getIdPersona());
                $sNombreCompleto .= $oPersona->getNombre();
                if (strlen(trim($oPersona->getApellido1())) > 0)
                    $sNombreCompleto .= " " . $oPersona->getApellido1();
                if (strlen(trim($oPersona->getApellido2())) > 0)
                    $sNombreCompleto .= " " . $oPersona->getApellido2();
            }
            else
            {
                $oOrganismo = SftPersonaPeer::retrieveByPK($this->getIdOrganismo());
                $sNombreCompleto .= $oOrganismo->getNombre();
            }
        }
        return $sNombreCompleto;
    }

    public function tienePerfil($idPerfil)
    {
        $c = new Criteria();
        $c->add(SftAccesoPeer::ID_PERFIL, $idPerfil);
        $c->add(SftAccesoPeer::ID_USUARIO, $this->getId());


        $usuario_perfil = SftAccesoPeer::doSelectOne($c);

        if ($usuario_perfil instanceof SftAcceso)
        {
            return true;
        } else
        {
            return false;
        }
    }

    public function ponPerfil($idPerfil)
    {
        $up = new SftAcceso();

        $up->setIdUsuario($this->getId());
        $up->setIdPerfil($idPerfil);
        $up->save();
    }

    public function quitaPerfil($idPerfil)
    {
        $c = new Criteria();
        $c->add(SftAccesoPeer::ID_PERFIL, $idPerfil);
        $c->add(SftAccesoPeer::ID_USUARIO, $this->getId());


        $up = SftAccesoPeer::doSelectOne($c);

        if ($up instanceof SftAcceso)
        {
            $up->delete();
        }
    }

    public function dameConfPersonal($claveAplicacion)
    {
        $c = new Criteria();
        $c->add(SftAplicacionPeer::CLAVE, $claveAplicacion);
        $c->addJoin(SftAplicacionPeer::ID, SftConfPersonalPeer::ID_APLICACION);

        $confs = $this->getSftConfPersonals($c);

        if (count($confs) > 0)
        {
            $conf = $confs[0];
            return array('conf' => array($conf->getIdPerfil(), $conf->getIdAmbito(), $conf->getIdPeriodo()));
        } else
        {
            return array('conf' => array());
        }
    }

    public function ponConfPersonal($oConfPersonal, $claveAplicacion)
    {
        $c = new Criteria();
        $c->add(SftAplicacionPeer::CLAVE, $claveAplicacion);
        $c->addJoin(SftAplicacionPeer::ID, SftConfPersonalPeer::ID_APLICACION);

        $confs = $this->getSftConfPersonals($c);

        if (count($confs) > 0)
        {
            $conf = $confs[0];
        } else
        {
            $c->clear();
            $c->add(SftAplicacionPeer::CLAVE, $claveAplicacion);
            $aplicacion = SftAplicacionPeer::doSelectOne($c);
            $conf = new SftConfPersonal();
            $conf->setIdAplicacion($aplicacion->getId());
            $conf->setIdUsuario($oConfPersonal->dameIdUsuario());
        }

        $conf->setIdPerfil($oConfPersonal->dameIdPerfil());
        $conf->setIdAmbito($oConfPersonal->dameIdAmbito());
        $conf->setIdPeriodo($oConfPersonal->dameIdPeriodo());
        $conf->save();
    }

    public function dameAmbitos($perfil)
    {
        $c = new Criteria();

        $c->add(SftAccesoPeer::ID_USUARIO, $this->getIdUsuario());
        $c->add(SftAccesoPeer::ID_PERFIL, $perfil->getId());

        $acceso = SftAccesoPeer::doSelectOne($c);

        $accesos_ambitos = $acceso->getSftAccesoAmbitos();

        $ambitos = array();
        foreach ($accesos_ambitos as $ab)
        {
            $ambitos[] = $ab->getSftAmbito();
        }

        return $ambitos;
    }

    public function esPersona()
    {
        if (is_null($this->getIdOrganismo()))
        {
            return true;
        } else
        {
            return false;
        }
    }

    public function dameSfGuardUser()
    {
        $idSfUser = $this->getIdSfuser();

        if (!is_null($idSfUser))
        {
            $sfUser = sfGuardUserPeer::retrieveByPK($idSfUser);
            return $sfUser;
        } else
        {
            return null;
        }
    }

    public function getSfGuardUser()
    {
        return $this->dameSfGuardUser();
    }

    public function getUsername()
    {
        return $this->dameSfGuardUser()->getUsername();
    }

    public function getEmail()
    {
        $c = new Criteria();

        $c->add(SftEmailPeer::PREDETERMINADO, 1);

        if (!is_null($this->getIdPersona()))
        {
            $c->add(SftEmailPeer::ID_USUARIO, $this->getIdPersona());
        } elseif (!is_null($this->getIdOrganismo()))
        {
            $c->add(SftEmailPeer::ID_ORGANISMO, $this->getIdOrganismo());
        }

        $email = SftEmailPeer::doSelectOne($c);

        if ($email instanceof SftEmail)
        {
            return $email->getDireccion();
        } else
        {
            return null;
        }
    }

    public function getIsActive()
    {
        return $this->dameSfGuardUser()->getIsActive();
    }

    public function setUsername($v)
    {
        $this->dameSfGuardUser()->setUsername($v);
    }

    public function setPassword($password)
    {
        $this->dameSfGuardUser()->setPassword($password);
    }

    public function setIsActive()
    {
        return $this->dameSfGuardUser()->setIsActive(true);
    }

    public function getNombre()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getSftPersona()->getNombre();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return $this->getSftOrganismo()->getNombre();
        } else
        {
            return null;
        }
    }

    public function getApellido1()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getSftPersona()->getApellido1();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return $this->getSftOrganismo()->getAbreviatura();
        } else
        {
            return null;
        }
    }

    public function getApellido2()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getSftPersona()->getApellido2();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return null;
        } else
        {
            return null;
        }
    }

    public function getNombreCompleto()
    {

        if (!is_null($this->getIdPersona()))
        {
            return $this->getSftPersona()->getNombreCompleto();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return $this->getSftOrganismo()->getNombre();
            ;
        } else
        {
            return null;
        }
    }

    public function getDocidentificacion()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getSftPersona()->getDocidentificacion();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return $this->getSftOrganismo()->getCodigo();
        } else
        {
            return null;
        }
    }



    public function save(PropelPDO $con = null)
    {
        $isNew = $this->isNew();

        parent::save($con);

        if ($isNew)
        {
            $controlAcceso = new SftControlAcceso();

            $controlAcceso->setId($this->getId());
            $controlAcceso->save();
        }
    }

    /**
     * Devuelve las credenciales que tiene un usuario a través de sus perfiles.
     * Si se le pasa como argumento el id de una aplicación devuelve únicamente
     * las credenciales que tiene en dicha aplicación.
     * @param <type> $id_aplicacion
     * @return <type>
     */
    public function getCredenciales($id_aplicacion = null)
    {
        $accesos = $this->getSftAccesos();

        $credenciales = array();
        foreach ($accesos as $acceso)
        {
            $perfil = $acceso->getSftPerfil();

            $pcs = $perfil->getSftPerfilCredencials();

            foreach ($pcs as $pc)
            {
                if (is_null($id_aplicacion) ||
                        $pc->getSftCredencial()->getIdAplicacion() == $id_aplicacion)
                {
                    $credenciales[] = $pc->getSftCredencial();
                }
            }
        }

        return array_values(array_unique($credenciales));
    }

    public function getPerfilesEnAplicacion($id_aplicacion)
    {

        $aplicacion = SftAplicacionPeer::retrieveByPK($id_aplicacion);

        $c = new Criteria();

        $c->add(SftAplicacionPeer::CLAVE, $aplicacion->getClave());
        $c->addJoin(SftAplicacionPeer::ID, SftCredencialPeer::ID_APLICACION);
        $c->addJoin(SftCredencialPeer::ID, SftPerfilCredencialPeer::ID_CREDENCIAL);
        $c->addJoin(SftPerfilCredencialPeer::ID_PERFIL, SftPerfilPeer::ID);
        $c->addJoin(SftPerfilPeer::ID, SftAccesoPeer::ID_PERFIL);
        $c->addJoin(SftPerfilPeer::ID_UO, SftUoPeer::ID);
        $c->addJoin(SftUoPeer::ID, SftPeriodoPeer::ID_UO);
        $c->add(SftAccesoPeer::ID_USUARIO, $this->getId());
        $c->addAscendingOrderByColumn(SftPeriodoPeer::ID);
        $c->setDistinct();

        $tEAs = SftPeriodoPeer::doSelect($c);

        // Recorremos todos esos ejercicios academicos en busca de:
        // -> perfiles con ámbitos en ellos
        // -> perfiles que no tienen ambitos definidos (id_ambito=NULL en la tabla EDA_TiposAmbito)
        // La información que se va a mostrar se recoge en el array $tInfoPerfiles
        $tInfoPerfiles = array();
        $i = 0;
        foreach ($tEAs as $ea)
        {
            // Pillamos los perfiles del usuario en la uo del periodo en cuestion
            // con credenciales en la aplicación
            $c->clear();
            $c->addJoin(SftPerfilPeer::ID, SftPerfilCredencialPeer::ID_PERFIL);
            $c->add(SftPerfilPeer::ID_UO, $ea->getSftUo()->getId());
            $c->addJoin(SftPerfilPeer::ID, SftAccesoPeer::ID_PERFIL);
            $c->addJoin(SftPerfilCredencialPeer::ID_CREDENCIAL, SftCredencialPeer::ID);
            $c->addJoin(SftCredencialPeer::ID_APLICACION, SftAplicacionPeer::ID);
            $c->add(SftAplicacionPeer::CLAVE, $aplicacion->getClave());
            $c->add(SftAccesoPeer::ID_USUARIO, $this->getId());
            $c->setDistinct();
            $c->addAscendingOrderByColumn(SftPerfilPeer::ID);

            $tPerfiles = SftPerfilPeer::doSelect($c);


//            echo '<pre>';
//            print_r($ea -> getSftUo()-> getNombre());
//            echo '<br>';
//            echo '============';
//            echo '<br>';
//            foreach ($tPerfiles as $perfil)
//            {
//                echo $perfil -> getNombre();
//                echo '<br>';
//            }
//            echo count($tPerfiles);
//            echo '<br>';
//            echo '------------';
//            echo '<br>';

            if (count($tPerfiles) > 0)
            {
                $i++;

                $tInfoPerfiles[$i]['id_ea'] = $ea->getId();
                $tInfoPerfiles[$i]['descripcion_ea'] = $ea->getDescripcion();
                $tInfoPerfiles[$i]['id_uo'] = $ea->getIdUo();
                $tInfoPerfiles[$i]['codigo_uo'] = $ea->getSftUo()->getCodigo();
                $tInfoPerfiles[$i]['nombre_uo'] = $ea->getSftUo()->getNombre();

                $j = 0;
                foreach ($tPerfiles as $perfil)
                {
                    $j++;

                    $tInfoPerfiles[$i]['perfiles'][$j]['id_perfil'] = $perfil->getId();
                    $tInfoPerfiles[$i]['perfiles'][$j]['nombre_perfil'] = $perfil->getNombre();
                    $tInfoPerfiles[$i]['perfiles'][$j]['descripcion_perfil'] = $perfil->getDescripcion();

                    // Pillamos los ambitos del perfil a través del objeto acceso
                    $c->clear();
                    $c->add(SftAccesoPeer::ID_USUARIO, $this->getId());
                    $c->add(SftAccesoPeer::ID_PERFIL, $perfil->getId());
                    $tAcceso = $this->getSftAccesos($c);

                    // Ámbitos
                    if (!is_null($perfil->getIdAmbitoTipo()) && count($tAcceso) > 0)
                    {
                        $c->clear();
                        $c->add(SftAmbitoPeer::ID_PERIODO, $ea->getId());
                        $c->addJoin(SftAmbitoPeer::ID, SftAccesoAmbitoPeer::ID_AMBITO);
                        $tAccesosAmbitos = $tAcceso[0]->getSftAccesoAmbitos($c); // Sólo debe haber un acceso
                        if (count($tAccesosAmbitos) == 0) // El perfil no tiene ambitos en ese ejercicio academico
                        {
                            // Eliminamos ese perfil de la lista
                            unset($tInfoPerfiles[$i]['perfiles'][$j]);
                            $j--;
                        } else
                        {
                            $k = 0;
                            foreach ($tAccesosAmbitos as $ab)
                            {
                                $k++;
                                $tInfoPerfiles[$i]['perfiles'][$j]['ambitos'][$k]['id'] = $ab->getIdAmbito();
                                $tInfoPerfiles[$i]['perfiles'][$j]['ambitos'][$k]['ejeracad'] = $ab->getSftAmbito()->getIdPeriodo();
                                $tInfoPerfiles[$i]['perfiles'][$j]['ambitos'][$k]['nombre'] = $ab->getSftAmbito()->getNombre();
                            }
                        }
                    } else // perfil sin ambitos
                    {
                        $tInfoPerfiles[$i]['perfiles'][$j]['ambitos'][1]['nombre'] = 'no_ambitos';
                        $tInfoPerfiles[$i]['perfiles'][$j]['ambitos'][1]['id'] = null;
                    }
                }

                if (count($tInfoPerfiles[$i]['perfiles']) == 0) // No hay ningún perfil en ese periodo
                {
                    unset($tInfoPerfiles[$i]);
                    $i--;
                }
            }
        }
//        echo '<pre>';
//        print_r($tInfoPerfiles);
//        echo '</pre>';
//        exit;
        return $tInfoPerfiles;
    }

    public function numeroPerfiles($id_uo = null)
    {
        $c = new Criteria();
        if (!is_null($id_uo))
        {
            $c->addJoin(SftAccesoPeer::ID_PERFIL, SftPerfilPeer::ID);
            $c->add(SftPerfilPeer::ID_UO, $id_uo);
        }
        return count($this->getSftAccesos($c));
    }

    public function numeroTelefonos()
    {
        return count($this->getSftTelefonos());
    }

    public function numeroDirecciones()
    {
        return count($this->getSftDireccions());
    }

    public function numeroEmails()
    {
        return count($this->getSftEmails());
    }
    
    public function numeroAtributos()
    {
        return count($this->getSftUsuAtributoValors());
    }

}

// SftUsuario
