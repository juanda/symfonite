<?php

/**
 * Skeleton subclass for representing a row from the 'sft_perfiles' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Oct 23 16:15:22 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.sftGuardPlugin.lib.model
 */
class SftPerfil extends BaseSftPerfil
{

    public function getIdPerfil()
    {
        return $this->getId();
    }

    public function __toString()
    {
        return self::getNombre() . ':' . self::getSftUo()->getNombre();
    }

    public function tieneCredencial($idCredencial)
    {
        $perfil_credencial = SftPerfilCredencialPeer::retrieveByPK($this->getId(), $idCredencial);

        if ($perfil_credencial instanceof SftPerfilCredencial)
        {
            return true;
        } else
        {
            return false;
        }
    }

    public function ponCredencial($idCredencial)
    {
        $pc = new SftPerfilCredencial();

        $pc->setIdPerfil($this->getId());
        $pc->setIdCredencial($idCredencial);
        $pc->save();
    }

    public function quitaCredencial($idCredencial)
    {
        $pc = SftPerfilCredencialPeer::retrieveByPK($this->getId(), $idCredencial);

        if ($pc instanceof SftPerfilCredencial)
        {
            $pc->delete();
        }
    }

    /**
     *
     * @return Credenciales en la aplicaciÃ³n actual
     */
    public function getSftCredenciales()
    {
        $c = new Criteria();
        $c->addJoin(SftCredencialPeer::ID_APLICACION, SftAplicacionPeer::ID);
        $c->add(SftAplicacionPeer::CLAVE, sfConfig::get('app_clave'));

        $pcs = $this->getSftPerfilCredencialsJoinSftCredencial($c);

        $credenciales = array();
        foreach ($pcs as $pc)
        {
            $credencial = $pc->getSftCredencial();

            $credenciales[$credencial->getNombre()] = $credencial;
        }

        return $credenciales;
    }

    public function getPermissionNames()
    {
        $c = new Criteria();
        $c->addJoin(SftCredencialPeer::ID_APLICACION, SftAplicacionPeer::ID);
        $c->add(SftAplicacionPeer::CLAVE, sfConfig::get('app_clave'));

        $pcs = $this->getSftPerfilCredencialsJoinSftCredencial($c);

        $credenciales = array();
        foreach ($pcs as $pc)
        {
            $credencial = $pc->getSftCredencial();

            $credenciales[] = $credencial->getNombre();
        }

        return $credenciales;
    }

}

// SftPerfil
