<?php

/**
 * Skeleton subclass for representing a row from the 'sft_personas' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Oct 23 16:15:23 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.sftGuardPlugin.lib.model
 */
class SftPersona extends BaseSftPersona
{

    public function getIdPersona()
    {
        return $this->getId();
    }

    public function __toString()
    {
        return $this->getNombre() . ' ' . $this->getApellido1() . ' ' . $this->getApellido2();
    }

    public function delete(PropelPDO $con = null)
    {
        // Borramos usuarios
        $usuarios = $this->getSftUsuarios();
        // Solo debería haber uno, pero por si las moscas
        foreach ($usuarios as $usuario)
        {
            // Borramos el usuario asociado y todo su profile
            $usuario->delete();
        }

        parent::delete($con);
    }

    public function getSfusername()
    {
        $usuarios = $this->getSftUsuarios();
        if (count($usuarios) == 1)
        {
            $usuario = $usuarios[0];
            $id_sfuser = $usuario->getIdSfuser();
            $sfuser = sfGuardUserPeer::retrieveByPK($id_sfuser);
            if ($sfuser instanceof sfGuardUser)
            {
                return $sfuser->getUsername();
            } else
            {
                return null;
            }
        } else
        {
            return null;
        }
    }

    public function getSfUser()
    {
        $usuarios = $this->getSftUsuarios();
        if (count($usuarios) == 1)
        {
            $usuario = $usuarios[0];
            $id_sfuser = $usuario->getIdSfuser();
            $sfuser = sfGuardUserPeer::retrieveByPK($id_sfuser);
            return $sfuser;
        } else
        {
            return null;
        }
    }

    public function save(PropelPDO $con = null)
    {
        $isNew = $this->isNew();
        $this->setUpdatedAt(time());
        $documento=$this->getDocidentificacion();
        if($documento === "")
        {
            $this->setDocidentificacion(NULL);
        }
        parent::save($con);

        if ($isNew) // Hay que crearle su sfUser y su SftUsuario
        {
            $sfUser = new sfGuardUser();
            $sfUser->setUsername($this->generaUserName());
            $sfUser->setPassword('pass' . $sfUser->getUsername());
            $sfUser->setIsActive(1);

            $sfUser->save($con);

            $usuario = new SftUsuario();
            $usuario->setIdSfuser($sfUser->getId());
            $usuario->setAlias($sfUser->getUsername());
            $usuario->setIdCulturapref('es_ES');
            $usuario->setActivo(1);
            $usuario->setIdPersona($this->getId());

            $usuario->save($con);
        }
    }


    public function dameSftUsuario()
    {
        $usuarios = $this->getSftUsuarios();

        if (count($usuarios) > 0 && $usuarios[0] instanceof SftUsuario)
        {
            return $usuarios[0];
        } else
        {
            return null;
        }
    }

    public function generaUserName()
    {
        $nombre = $this->getNombre();
        $apellido1 = $this->getApellido1();
        $apellido2 = $this->getApellido2();

        $login = "";

        // Se construye un login de 6 caracteres
        // Antes se eliminan acentos, diéresis y caracteres especiales
        $nom = Utilidades::limpiarCadena($nombre);
        if ($apellido1)
            $ap_1 = Utilidades::limpiarCadena($apellido1);
        else
            $ap_1 = substr($nom, 1);

        if ($apellido2) // Los usuarios anglosajones, p.ej, no utilizan dos apellidos
            $ap_2 = Utilidades::limpiarCadena($apellido2);
        else
            $ap_2 = $ap_1[2];
        $login = strtolower($nom[0] . $ap_1[0] . $ap_1[1] . $ap_2[0]);

        $c = new Criteria();
        //$c->add(sfGuardUserPeer::USERNAME, $login . '%', Criteria::LIKE);
        $regex = sfGuardUserPeer :: USERNAME." REGEXP '".$login."[0-9]{4}' "; //El login seguido de 4 dígitos
        $c->add(sfGuardUserPeer :: USERNAME, $regex, Criteria::CUSTOM);
        $c->addDescendingOrderByColumn(sfGuardUserPeer::USERNAME);

        $usuarios = sfGuardUserPeer::doSelect($c);

        if (count($usuarios) > 0)
        {
            $usuario = $usuarios[0];

            $num = substr($usuario->getUsername(), 4);

            $num = intval($num) + 1;
        } else
        {
            $num = 0;
        }

        $login .= str_pad($num, 4, "0", STR_PAD_LEFT);

        return $login;
    }

    public function generaPassword()
    {
        return Utilidades::generaClave(6);
    }

    public function getNombreCompleto()
    {
        return self::getNombre() . ' ' . self::getApellido1() . ' ' .
                self::getApellido2();
    }

}

// SftPersona
