<?php
/*
* Copyright 2010 Instituto de Tecnologías Educativas - Ministerio de Educación de España
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente
* (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en:
*
* http://ec.europa.eu/idabc/eupl5
* 
* y también en:

* http://ec.europa.eu/idabc/en/document/7774.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde
* por escrito, el programa distribuido con arreglo a la
* Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas
* ni implícitas.
* Véase la Licencia en el idioma concreto que rige
* los permisos y limitaciones que establece la Licencia.
*/
?>
<?php


/**
 * Skeleton subclass for representing a row from the 'eda_personas' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Fri Feb 26 09:21:59 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.edaGuardPlugin.lib.model
 */
class EdaPersonas extends BaseEdaPersonas
{
    public function getIdPersona()
    {
        return $this -> getId();
    }

    public function __toString()
    {
        return $this->getNombre().' '. $this -> getApellido1(). ' '. $this -> getApellido2();
    }

    public function delete(PropelPDO $con = null)
    {
        // Borramos usuarios
        $usuarios = $this -> getEdaUsuarioss();
        // Solo debería haber uno, pero por si las moscas
        foreach($usuarios as $usuario)
        {
            // Borramos el usuario asociado y todo su profile
            $usuario -> delete();
        }

        //Borramos emais

        $emails = $this -> getEdaEmailss();

        foreach ($emails as $email)
        {
            $email -> delete($con);
        }

        // Borramos direcciones

        $direcciones = $this -> getEdaDireccioness();

        foreach ($direcciones as $direccion)
        {
            $direccion -> delete($con);
        }

        // Borramos telefonos

        $telefonos = $this -> getEdaTelefonoss();

        foreach ($telefonos as $telefono)
        {
            $telefono -> delete($con);
        }

        parent::delete($con);

    }
    public function getSfusername()
    {
        $usuarios = $this  -> getEdaUsuarioss();
        if(count($usuarios) == 1)
        {
            $usuario = $usuarios[0];
            $id_sfuser = $usuario -> getIdSfuser();
            $sfuser = sfGuardUserPeer::retrieveByPK($id_sfuser);
            if($sfuser instanceof sfGuardUser)
            {
                return  $sfuser -> getUsername();
            }
            else
            {
                return null;
            }
        }
        else
        {
            return null;
        }
    }

    public function getSfUser()
    {
        $usuarios = $this  -> getEdaUsuarioss();
        if(count($usuarios) == 1)
        {
            $usuario = $usuarios[0];
            $id_sfuser = $usuario -> getIdSfuser();
            $sfuser = sfGuardUserPeer::retrieveByPK($id_sfuser);
            return  $sfuser;
        }
        else
        {
            return null;
        }
    }

    public function save(PropelPDO $con = null)
    {
        $isNew = $this -> isNew();

        parent::save($con);

        if($isNew) // Hay que crearle su sfUser y su EdaUsuario

        {
            $sfUser = new sfGuardUser();
            $sfUser -> setUsername($this -> generaUserName());
            $sfUser -> setPassword('pass'.$sfUser -> getUsername());
            $sfUser -> setIsActive(1);

            $sfUser -> save($con);

            $usuario = new EdaUsuarios();
            $usuario -> setIdSfuser($sfUser -> getId());
            $usuario -> setAlias($sfUser -> getUsername());
            $usuario -> setIdCulturapref('es_ES');
            $usuario -> setActivo(1);
            $usuario -> setIdPersona($this -> getId());

            $usuario -> save($con);
        }
    }

    public function numeroPerfiles($id_uo = null)
    {
        $usuarios =  $this -> getEdaUsuarioss();
        if(count($usuarios) > 0 && $usuarios[0] instanceof  EdaUsuarios)
        {
            $c = new Criteria();
            if(!is_null($id_uo))
            {
                $c -> addJoin(EdaAccesosPeer::ID_PERFIL, EdaPerfilesPeer::ID);
                $c -> add(EdaPerfilesPeer::ID_UO, $id_uo);
            }
            return count($usuarios[0] -> getEdaAccesoss($c));
        }
        else
        {
            return false;
        }
    }

    public function dameEdaUsuarios()
    {
        $usuarios =  $this -> getEdaUsuarioss();

        if(count($usuarios) > 0 && $usuarios[0] instanceof  EdaUsuarios)
        {
            return $usuarios[0];
        }
        else
        {
            return null;
        }
    }

    public function generaUserName()
    {
        $nombre    = $this -> getNombre();
        $apellido1 = $this -> getApellido1();
        $apellido2 = $this -> getApellido2();

        $login = "";

        // Se construye un login de 6 caracteres
        // Antes se eliminan acentos, diéresis y caracteres especiales
        $nom = Utilidades::limpiarCadena($nombre);
        if($apellido1)
            $ap_1 = Utilidades::limpiarCadena($apellido1);
        else
            $ap_1 = substr($nombre, 1);

        if($apellido2) // Los usuarios anglosajones, p.ej, no utilizan dos apellidos
            $ap_2 = Utilidades::limpiarCadena($apellido2);
        else
            $ap_2 = $ap_1[2];
        $login = strtolower($nom[0].$ap_1[0].$ap_1[1].$ap_2[0]);

        $c = new Criteria();
        $c -> add(sfGuardUserPeer::USERNAME,$login.'%', Criteria::LIKE);
        $c -> addDescendingOrderByColumn(sfGuardUserPeer::USERNAME);

        $usuarios = sfGuardUserPeer::doSelect($c);

        if(count($usuarios) > 0)
        {
            $usuario = $usuarios[0];

            $num = substr($usuario -> getUsername(), 4);

            $num = intval($num) + 1;
        }
        else
        {
            $num = 0;
        }

        $login .= str_pad($num, 4, "0", STR_PAD_LEFT);

        return $login;
    }

    public function generaPassword()
    {
        return Utilidades::generaClave(6);
    }
} // EdaPersonas
