<?php
/*
* Copyright 2010 Instituto de Tecnologías Educativas - Ministerio de Educación de España
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente
* (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en:
*
* http://ec.europa.eu/idabc/eupl5
* 
* y también en:

* http://ec.europa.eu/idabc/en/document/7774.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde
* por escrito, el programa distribuido con arreglo a la
* Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas
* ni implícitas.
* Véase la Licencia en el idioma concreto que rige
* los permisos y limitaciones que establece la Licencia.
*/
?>
<?php


/**
 * Skeleton subclass for representing a row from the 'eda_perfiles' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Fri Feb 26 09:21:58 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.edaGuardPlugin.lib.model
 */
class EdaPerfiles extends BaseEdaPerfiles
{

    public function getIdPerfil()
    {
        return $this -> getId();
    }

    public function __toString()
    {
        return self::getNombre().':'.self::getEdaUos() -> getNombre();
    }

    public function tieneCredencial($idCredencial)
    {
        $perfil_credencial = EdaPerfilCredencialPeer::retrieveByPK($this -> getId(), $idCredencial);

        if($perfil_credencial instanceof EdaPerfilCredencial)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public function ponCredencial($idCredencial)
    {
        $pc = new EdaPerfilCredencial();

        $pc -> setIdPerfil($this -> getId());
        $pc -> setIdCredencial($idCredencial);
        $pc -> save();
    }

    public function quitaCredencial($idCredencial)
    {
        $pc = EdaPerfilCredencialPeer::retrieveByPK($this -> getId(), $idCredencial);

        if($pc instanceof EdaPerfilCredencial)
        {
            $pc -> delete();
        }
    }

    /**
     *
     * @return Credenciales en la aplicación actual
     */
    public function getEdaCredenciales()
    {
        $c = new Criteria();
        $c -> addJoin(EdaCredencialesPeer::ID_APLICACION, EdaAplicacionesPeer::ID);
        $c -> add(EdaAplicacionesPeer::CLAVE, sfConfig::get('app_clave'));

        $pcs = $this -> getEdaPerfilCredencialsJoinEdaCredenciales($c);

        $credenciales = array();
        foreach ($pcs as $pc)
        {
            $credencial = $pc -> getEdaCredenciales();

            $credenciales[$credencial -> getNombre()] = $credencial;
        }

        return $credenciales;
    }

    public function getPermissionNames()
    {
        $c = new Criteria();
        $c -> addJoin(EdaCredencialesPeer::ID_APLICACION, EdaAplicacionesPeer::ID);
        $c -> add(EdaAplicacionesPeer::CLAVE, sfConfig::get('app_clave'));

        $pcs = $this -> getEdaPerfilCredencialsJoinEdaCredenciales($c);

        $credenciales = array();
        foreach ($pcs as $pc)
        {
            $credencial = $pc -> getEdaCredenciales();

            $credenciales[] = $credencial -> getNombre();
        }

        return $credenciales;
    }
} // EdaPerfiles
