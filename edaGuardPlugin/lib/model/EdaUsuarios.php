<?php

/*
 * Copyright 2010 Instituto de Tecnologías Educativas - Ministerio de Educación de España
 *
 * Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente
 * (la «Licencia»);
 * Solo podrá usarse esta obra si se respeta la Licencia.
 * Puede obtenerse una copia de la Licencia en:
 *
 * http://ec.europa.eu/idabc/eupl5
 *
 * y también en:

 * http://ec.europa.eu/idabc/en/document/7774.html
 *
 * Salvo cuando lo exija la legislación aplicable o se acuerde
 * por escrito, el programa distribuido con arreglo a la
 * Licencia se distribuye «TAL CUAL»,
 * SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas
 * ni implícitas.
 * Véase la Licencia en el idioma concreto que rige
 * los permisos y limitaciones que establece la Licencia.
 */
?>
<?php

/**
 * Skeleton subclass for representing a row from the 'eda_usuarios' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Fri Feb 26 09:22:00 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.edaGuardPlugin.lib.model
 */
class EdaUsuarios extends BaseEdaUsuarios
{

    /**
     * Initializes internal state of EdaUsuarios object.
     * @see        parent::__construct()
     */
    public function __construct()
    {
        // Make sure that parent constructor is always invoked, since that
        // is where any default values for this object are set.
        parent::__construct();
    }

    public function getIdUsuario()
    {
        return $this->getId();
    }

    public function __toString()
    {
        if (is_null($this->getIdPersona()))
        {
            $organismo = $this->getEdaOrganismos();

            return $organismo->getNombre();
        } else
        {
            $persona = $this->getEdaPersonas();

            return $persona->getNombre() . ' ' . $persona->getApellido1() . ' ' . $persona->getApellido2();
        }
    }

    public function delete(PropelPDO $con = null)
    {
        // Borramos el sfuser asociado y todo su profile
        $sfUser = $this->getSfGuardUser();
        if ($sfUser instanceof sfGuardUser)
        {
            $sfUser->delete();
        }

        // Borramos los atributos
        $atributos = $this->getEdaUsuAtributosValoress();

        foreach ($atributos as $atributo)
        {
            $atributo->delete($con);
        }

        // Borramos las configuraciones personales
        $confPersonales = $this->getEdaConfpersonaless();
        foreach ($confPersonales as $confPersonal)
        {
            $confPersonal->delete($con);
        }

        // borramos los controles de acceso
        $control_acceso = $this->getEdaControlAccesos();

        if ($control_acceso instanceof EdaControlAccesos)
        {
            $control_acceso->delete();
        }

        // Borramos los accesos
        $accesos = $this->getEdaAccesoss();

        foreach ($accesos as $acceso)
        {
            $acceso->delete($con);
        }

        parent::delete($con);
    }

    /**
     * Función que devuelve el nombre completo del usuario actual
     *
     * @return String
     */
    public function NombreCompleto()
    {
        $sNombreCompleto = "";
        if ($this->getIdUsuario() > 0)
        {
            $oPersona = EdaPersonasPeer::retrieveByPK($this->getIdPersona());
            $sNombreCompleto .= $oPersona->getNombre();
            if (strlen(trim($oPersona->getApellido1())) > 0)
                $sNombreCompleto .= " " . $oPersona->getApellido1();
            if (strlen(trim($oPersona->getApellido2())) > 0)
                $sNombreCompleto .= " " . $oPersona->getApellido2();
        }
        return $sNombreCompleto;
    }

    public function tienePerfil($idPerfil)
    {
        $c = new Criteria();
        $c->add(EdaAccesosPeer::ID_PERFIL, $idPerfil);
        $c->add(EdaAccesosPeer::ID_USUARIO, $this->getId());


        $usuario_perfil = EdaAccesosPeer::doSelectOne($c);

        if ($usuario_perfil instanceof EdaAccesos)
        {
            return true;
        } else
        {
            return false;
        }
    }

    public function ponPerfil($idPerfil)
    {
        $up = new EdaAccesos();

        $up->setIdUsuario($this->getId());
        $up->setIdPerfil($idPerfil);
        $up->save();
    }

    public function quitaPerfil($idPerfil)
    {
        $c = new Criteria();
        $c->add(EdaAccesosPeer::ID_PERFIL, $idPerfil);
        $c->add(EdaAccesosPeer::ID_USUARIO, $this->getId());


        $up = EdaAccesosPeer::doSelectOne($c);

        if ($up instanceof EdaAccesos)
        {
            $up->delete();
        }
    }

    public function dameConfPersonal($claveAplicacion)
    {
        $c = new Criteria();
        $c->add(EdaAplicacionesPeer::CLAVE, $claveAplicacion);
        $c->addJoin(EdaAplicacionesPeer::ID, EdaConfpersonalesPeer::ID_APLICACION);

        $confs = $this->getEdaConfpersonaless($c);

        if (count($confs) > 0)
        {
            $conf = $confs[0];
            return array('conf' => array($conf->getIdPerfil(), $conf->getIdAmbito(), $conf->getIdPeriodo()));
        } else
        {
            return array('conf' => array());
        }
    }

    public function ponConfPersonal($oConfPersonal, $claveAplicacion)
    {
        $c = new Criteria();
        $c->add(EdaAplicacionesPeer::CLAVE, $claveAplicacion);
        $c->addJoin(EdaAplicacionesPeer::ID, EdaConfpersonalesPeer::ID_APLICACION);

        $confs = $this->getEdaConfpersonaless($c);

        if (count($confs) > 0)
        {
            $conf = $confs[0];
        } else
        {
            $c->clear();
            $c->add(EdaAplicacionesPeer::CLAVE, $claveAplicacion);
            $aplicacion = EdaAplicacionesPeer::doSelectOne($c);
            $conf = new EdaConfpersonales();
            $conf->setIdAplicacion($aplicacion->getId());
            $conf->setIdUsuario($oConfPersonal->dameIdUsuario());
        }

        $conf->setIdPerfil($oConfPersonal->dameIdPerfil());
        $conf->setIdAmbito($oConfPersonal->dameIdAmbito());
        $conf->setIdPeriodo($oConfPersonal->dameIdPeriodo());
        $conf->save();
    }

    public function dameAmbitos($perfil)
    {
        $c = new Criteria();

        $c->add(EdaAccesosPeer::ID_USUARIO, $this->getIdUsuario());
        $c->add(EdaAccesosPeer::ID_PERFIL, $perfil->getId());

        $acceso = EdaAccesosPeer::doSelectOne($c);

        $accesos_ambitos = $acceso->getEdaAccesoAmbitos();

        $ambitos = array();
        foreach ($accesos_ambitos as $ab)
        {
            $ambitos[] = $ab->getEdaAmbitos();
        }

        return $ambitos;
    }

    public function esPersona()
    {
        if (is_null($this->getIdOrganismo()))
        {
            return true;
        } else
        {
            return false;
        }
    }

    public function dameSfGuardUser()
    {
        $idSfUser = $this->getIdSfuser();

        if (!is_null($idSfUser))
        {
            $sfUser = sfGuardUserPeer::retrieveByPK($idSfUser);
            return $sfUser;
        } else
        {
            return null;
        }
    }

    public function getSfGuardUser()
    {
        return $this->dameSfGuardUser();
    }

    public function getUsername()
    {
        return $this->dameSfGuardUser()->getUsername();
    }

    public function getEmail()
    {
        $c = new Criteria();

        $c->add(EdaEmailsPeer::PREDETERMINADO, 1);

        if (!is_null($this->getIdPersona()))
        {
            $c->add(EdaEmailsPeer::ID_PERSONA, $this->getIdPersona());
        } elseif (!is_null($this->getIdOrganismo()))
        {
            $c->add(EdaEmailsPeer::ID_ORGANISMO, $this->getIdOrganismo());
        }

        $email = EdaEmailsPeer::doSelectOne($c);

        if ($email instanceof EdaEmails)
        {
            return $email->getDireccion();
        } else
        {
            return null;
        }
    }

    public function getIsActive()
    {
        return $this->dameSfGuardUser()->getIsActive();
    }

    public function setUsername($v)
    {
        $this->dameSfGuardUser()->setUsername($v);
    }

    public function setPassword($password)
    {
        $this->dameSfGuardUser()->setPassword($password);
    }

    public function setIsActive()
    {
        return $this->dameSfGuardUser()->setIsActive(true);
    }

    public function getNombre()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getEdaPersonas()->getNombre();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return $this->getEdaOrganismos()->getNombre();
        } else
        {
            return null;
        }
    }

    public function getApellido1()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getEdaPersonas()->getApellido1();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return $this->getEdaOrganismos()->getAbreviatura();
        } else
        {
            return null;
        }
    }

    public function getApellido2()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getEdaPersonas()->getApellido2();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return null;
        } else
        {
            return null;
        }
    }

    public function getDocidentificacion()
    {
        if (!is_null($this->getIdPersona()))
        {
            return $this->getEdaPersonas()->getDocidentificacion();
        } elseif (!is_null($this->getIdOrganismo()))
        {
            return $this->getEdaOrganismos()->getCodigo();
        } else
        {
            return null;
        }
    }

    public function getAlias()
    {
        return strtolower($this->getNombre() . ' ' . $this->getApellido1() . ' ' . $this->getApellido2());
    }

    public function save(PropelPDO $con = null)
    {
        $isNew = $this->isNew();

        parent::save($con);

        if ($isNew)
        {
            $controlAcceso = new EdaControlAccesos();

            $controlAcceso->setId($this->getId());
            $controlAcceso->save();
        }
    }

    /**
     * Devuelve las credenciales que tiene un usuario a través de sus perfiles.
     * Si se le pasa como argumento el id de una aplicación devuelve únicamente
     * las credenciales que tiene en dicha aplicación.
     * @param <type> $id_aplicacion
     * @return <type>
     */
    public function getCredenciales($id_aplicacion = null)
    {
        $accesos = $this->getEdaAccesoss();

        $credenciales = array();
        foreach ($accesos as $acceso)
        {
            $perfil = $acceso->getEdaPerfiles();

            $pcs = $perfil->getEdaPerfilCredencials();

            foreach ($pcs as $pc)
            {
                if (is_null($id_aplicacion) ||
                        $pc->getEdaCredenciales()->getIdAplicacion() == $id_aplicacion)
                {
                    $credenciales[] = $pc->getEdaCredenciales();
                }
            }
        }

        return array_values(array_unique($credenciales));
    }

}

// EdaUsuarios
