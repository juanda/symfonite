<?php
/*
* Copyright 2010 Instituto de Tecnologías Educativas - Ministerio de Educación de España
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente
* (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en:
*
* http://ec.europa.eu/idabc/eupl5
* 
* y también en:

* http://ec.europa.eu/idabc/en/document/7774.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde
* por escrito, el programa distribuido con arreglo a la
* Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas
* ni implícitas.
* Véase la Licencia en el idioma concreto que rige
* los permisos y limitaciones que establece la Licencia.
*/
?>
<?php


/**
 * Skeleton subclass for representing a row from the 'eda_accesos' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Fri Feb 26 09:21:55 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    plugins.edaGuardPlugin.lib.model
 */
class EdaAccesos extends BaseEdaAccesos
{

    /**
     * Initializes internal state of EdaAccesos object.
     * @see        parent::__construct()
     */
    public function __construct()
    {
        // Make sure that parent constructor is always invoked, since that
        // is where any default values for this object are set.
        parent::__construct();
    }

    public function getIdAcceso()
    {
        return $this -> getId();
    }

    public function __toString()
    {
        $alias  = self::getEdaUsuarios()->getAlias();
        $perfil = self::getEdaPerfiles()->getDescripcion();
        $uo     = self::getEdaPerfiles()->getEdaUos()->getCodigo();
        return $alias.":".$perfil.":".$uo;
    }


    /**
     * Devuelve los ámbitos activos de un acceso en un ejercicio académico dado.
     * Si el perfil del acceso no tiene ámbitos (id_ambito = NULL) en la tabla
     * 'eda_tiposambito' devuelve NULL
     *
     * @param unknown_type $id_ea
     */
    public function dameAmbitos($id_ea)
    {
        $id_ambito = self::getEdaPerfiles()->getIdAmbito();

        if(!$id_ambito) // Perfil sin ámbitos

        {
            return null;
        }
        else //Buscamos los ámbitos activos en el ejercicio académico dado

        {
            $oAmbito       = EdaAmbitosPeer::retrieveByPK($id_ambito);
            $aTablaAmbito  = $oAmbito -> getTabla();
            $aClasePeer    = sfInflector::camelize($aTablaAmbito).'Peer';

            $aTablaAccesosAmbito = "eda_accesos_".$aTablaAmbito;

            $con = Propel::getConnection();
            $sql = "select aa.id_ambito from $aTablaAccesosAmbito aa, $aTablaAmbito a where aa.id_acceso=".self::getIdAcceso()." and aa.id_ambito=a.id_ambito and a.id_ejercicioacademico=".$id_ea;
            $stn = $con -> prepareStatement($sql);
            $rs  = $stn -> executeQuery();

            $tAmbitos = array();
            while($rs->next())
            {
                $id = $rs -> getInt('id_ambito'); //Este id es el id_ambito de la tabla de ambitos en cuestion

                $tAmbitos[] = call_user_func(array($aClasePeer,"retrieveByPK"),$id);

                //			MenAulasPeer::retrieveByPK($id);

            }
            return $tAmbitos;
        }

    }

    /**
     * Devuelve el objeto Ambito con id_ambito=$id_ambito
     *
     * @param unknown_type $id_ambito
     */
    public function dameAmbito($id)
    {
        if(is_null($id))
        {
            echo "Parámetro incorrecto";
            exit;
        }
        $id_ambito = self::getEdaPerfiles()->getIdAmbito();

        $oAmbito       = EdaAmbitosPeer::retrieveByPK($id_ambito);
        $aTablaAmbito  = $oAmbito -> getTabla();
        $aClasePeer    = sfInflector::camelize($aTablaAmbito).'Peer';

        $aTablaAccesosAmbito = "eda_accesos_".$aTablaAmbito;

        $con = Propel::getConnection();
        $sql = "select id_ambito from $aTablaAmbito where id_ambito=".$id;
        $stn = $con -> prepareStatement($sql);
        $rs  = $stn -> executeQuery();
        $rs->next();
        $id = $rs -> getInt('id_ambito'); //Este id es el id_ambito de la tabla de ambitos en cuestion

        $Ambito = call_user_func(array($aClasePeer,"retrieveByPK"),$id);

        return $Ambito;

    }

    public function ponAmbito($ambito)
    {        
        $accesos_ambitos = new EdaAccesoAmbito();

        $accesos_ambitos -> setEdaAmbitos($ambito);
        $accesos_ambitos -> setEdaAccesos($this);
        $accesos_ambitos -> save();

    }

    public function quitaAmbito($ambito)
    {
        $c = new Criteria();

        $c -> add(EdaAccesoAmbitoPeer::ID_AMBITO, $ambito -> getId());
        $c -> add(EdaAccesoAmbitoPeer::ID_ACCESO, $this -> getId());

        $acceso_ambito = EdaAccesoAmbitoPeer::doSelectOne($c);
        $acceso_ambito -> delete();

    }

    public function tieneAmbito($ambito)
    {
        $c = new Criteria();

        $c -> add(EdaAccesoAmbitoPeer::ID_AMBITO, $ambito -> getId());
        $c -> addJoin(EdaAccesoAmbitoPeer::ID_ACCESO, EdaAccesosPeer::ID);
        $c -> add(EdaAccesosPeer::ID, $this -> getId());

        $accesos_ambitos = EdaAccesoAmbitoPeer::doSelect($c);

        if(count($accesos_ambitos) > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

} // EdaAccesos
